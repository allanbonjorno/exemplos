int i;
int v[9] = { -5, 6, 46, 44, 554, 56, -3, -1, 0};
mergesort(v, 9);
for(i = 0; i < 9; i++) printf("%d ", v[i]);
putchar('\n');
return 0;
}
void mergesort(int *v, int *c, int i, int f){
int *c = malloc(sizeof(int) *n);
sort (v, c, 0, n -1);
free(c);
}
void sort(int *v, int *c, int i, int f){
if (i >= f) return;
int m = (i + f) /2;
sort(v, c, i, m);
sort(v, c, m + 1, f);
if (v[m] <= v[m + 1]) return;
merge(v, c, i, m, f);
}
void merge (int *v, int *c, int i, int f){
int z, iv = i, ic = m + 1;
for (z = 1; z <= f; z++) c[z] = v[z];
z = i;
while (iv <= m && ic <= f){
if (c[iv] <= c[ic]) v[z++] = c[iv++];
else v[z++] = c[ic++];
}
while (iv <= m) v[z++] = c[iv++];
while (ic <= f) v[z++] = c[iv++];
}
